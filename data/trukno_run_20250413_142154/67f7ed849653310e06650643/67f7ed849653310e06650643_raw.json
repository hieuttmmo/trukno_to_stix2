{
  "_id": "67f7ed849653310e06650643",
  "title": "Atomic Stealer: Dissecting 2024's Most Notorious macOS Infostealer",
  "description": "Discover how Atomic Stealer (AMOS) targets macOS users, steals credentials and data, and how to detect, prevent, and validate against its TTPs.",
  "date": "2025-04-12T13:29:58.000Z",
  "url": "https://www.picussecurity.com/resource/blog/atomic-stealer-amos-macos-threat-analysis",
  "source": "Picus Security",
  "author": "sila.ozeren@picussecurity.com (S\u0131la \u00d6zeren)",
  "affectedIndustries": [],
  "affectedTechnologies": [
    "macOS (Endpoint OS)"
  ],
  "category": [
    "Endpoint Security",
    "Phishing Attacks"
  ],
  "relatedTTPs": [
    "5ff5e9864f7abf0017fd30ad",
    "5e5e8dc667cf77001710d421",
    "5fe0f94be45d410017a79cca",
    "5fe74f54778f4500170dc31f",
    "5fc92bbc2cf717001723dcdb",
    "5fdd16fa0128e50017fbea20",
    "6006fbf77cd3ef0017995a2c",
    "5e578a92f51c645aba4f0056",
    "5ffdef6502b57a0017acde0b",
    "5fce48abf4d5f3001723bb34",
    "5e578a91f51c645aba4ef778",
    "6009856d5eddce0017a7936e",
    "5f7dafb1dc55030017890302",
    "5ff3b07118d9c00017529b22",
    "6009836f5eddce0017a79369",
    "5e578a93f51c645aba4f06dd",
    "5f9c0b2d877bb400171a48b6"
  ],
  "relatedActors": [],
  "relatedMalware": [
    "644bb3d15af3a20014d0f35d"
  ],
  "IOCs": [
    {
      "ips": [
        "193.233.132.188",
        "46.101.104.172"
      ],
      "ipsWithRange": [
        "193.233.132.188",
        "46.101.104.172"
      ],
      "domains": [],
      "hashesMd5": [],
      "hashesSha1": [],
      "hashesSha256": [],
      "mitre": [
        "T1566.002",
        "T1204.002",
        "T1059.002",
        "T1027",
        "T1555.001",
        "T1005",
        "T1041",
        "T1562.012",
        "T1562.011",
        "T1562.010",
        "T1056",
        "T1562.009"
      ],
      "cves": []
    }
  ],
  "procedures": [
    {
      "procedure": "<p>Cybercriminals exploit Google's advertising platform to display deceptive ads that redirect users to fraudulent websites hosting Atomic Stealer. For instance, users searching for software like \"Arc Browser\" may encounter malicious ads leading to spoofed sites (e.g., aricl[.]net) that prompt the download of a malicious DMG installer.\u200b</p>",
      "TTP_ID": "5e578a91f51c645aba4ef778",
      "TTPDetails": {
        "title": "Malvertising",
        "description": "Malvertising allows an adversary to purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites.\n\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software. Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.\n\nMalvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.\n\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement. Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.",
        "number": "T1583.008",
        "stage": "02: Resource Development"
      }
    },
    {
      "procedure": "<p>Attackers create counterfeit versions of popular applications such as Tor Browser, Photoshop CC, and Microsoft Office. Unsuspecting users download these malicious installers, typically packaged as disk image (.dmg) files, which execute the malware instead of the legitimate software. \u200b</p>",
      "TTP_ID": "5ffdef6502b57a0017acde0b",
      "TTPDetails": {
        "title": "Masquerading",
        "description": "Masquerading attack allows adversaries to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools by making the name or location of an object, legitimate or malicious for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names. Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
        "number": "T1036 ",
        "stage": "07: Defense Evasion"
      }
    },
    {
      "procedure": "<p>Users are deceived into executing commands via the Terminal application. For example, a fake installer may instruct users to open Terminal and drag-and-drop a file to install an app, which actually executes the malicious payload.</p>\n<p><br></p>\n<p><img height=\"416px;\" src=\"https://lh7-rt.googleusercontent.com/slidesz/AGV_vUdIpvyAwpD2gpu8UyGGaHa0X5_5aT1Q0yB7IVovwvMwD3_8aZz7a1KDojOvVQKhhhG7TutetIolPyerNzbJSs_WxJj2qc6lUcT-wT9SLPPvVMEF3-k04mHDFq4gSB49UTLn2OIJzQ=s2048?key=mxnwOeNYxDn4hXdznkV_KGuL\" width=\"734px;\"/>&nbsp;</p>",
      "TTP_ID": "5fce48abf4d5f3001723bb34",
      "TTPDetails": {
        "title": "User Execution",
        "description": "User Execution attack may use social engineering to get users to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.",
        "number": "T1204",
        "stage": "04: Execution"
      }
    },
    {
      "procedure": "<p>Spearphishing is the main intial access for the malware.</p>",
      "TTP_ID": "5e578a92f51c645aba4f0056",
      "TTPDetails": {
        "title": "Spearphishing Link",
        "description": "Spearphishing Link is a phishing email attack that sends emails to specific & well-researched targets while purporting to be a trusted sender to entice them to click on a malicious link to a website that may compromise the user web browser using an exploit or prompts the user to download malicious applications, documents, zip files, or even executables.",
        "number": "T1566.002",
        "stage": "03: Initial Access"
      }
    },
    {
      "procedure": "<p>Upon opening these files, users are instructed to bypass macOS Gatekeeper\u2014a security feature intended to block untrusted software\u2014by right-clicking the application and selecting \"Open.\" This action permits the execution of unsigned or ad-hoc signed applications, circumventing Apple's security measures.</p>",
      "TTP_ID": "5fdd16fa0128e50017fbea20",
      "TTPDetails": {
        "title": "Malicious File",
        "description": "Malicious File attack relies upon a user opening a malicious file (including doc, pdf, xls, rtf, scr, exe, lnk, pif, cpl, rar, etc.) in order to gain execution.",
        "number": "T1204.002",
        "stage": "04: Execution"
      }
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>\n<p>&nbsp;<img height=\"390px;\" src=\"https://lh7-rt.googleusercontent.com/slidesz/AGV_vUdZbKtiTNqWA8wC_sjjn54PddCaFIipXzG7l5vWQy-bJXlFDGUWii_F5YvlKPZqxbWxb9ZiMfoIRTCWurc-ErWviEbWfa9jOd7WzASMzFwGa1dTPHHLwptVftAq3Bz_zyJl7XrMLw=s2048?key=mxnwOeNYxDn4hXdznkV_KGuL\" width=\"761px;\"/></p>\n<p><br></p>\n<p>Atomic Stealer employs AppleScript commands executed via osascript to create these fake dialog boxes. The use of the \"hidden answer\" parameter ensures that the password input is masked, mimicking standard password entry fields and enhancing the deception.</p>\n<p><br></p>\n<p>osascript -e 'display dialog \"The launcher needs permissions to enable background auto-updates.\\n\\nPlease enter your password.\" with title \"Auto-Updates System\" default answer \"\" with icon caution buttons {\"Continue\"} default button \"Continue\" with hidden answer'&nbsp;</p>",
      "TTP_ID": "5fc92bbc2cf717001723dcdb",
      "TTPDetails": {
        "title": "AppleScript",
        "description": "AppleScript attack may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes.",
        "number": "T1059.002",
        "stage": "04: Execution"
      }
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>",
      "TTP_ID": "5fe74f54778f4500170dc31f",
      "TTPDetails": {
        "title": "Input Capture",
        "description": "Input Capture attack uses various methods to capture user input to obtain credentials or collect information via login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
        "number": "T1056",
        "stage": "11: Collection"
      }
    },
    {
      "procedure": "<p>The new variant of Atomic Stealer employs heavy obfuscation through XOR encoding with a static key (0x91). A function named bewta() is responsible for de-xoring various bytes at runtime, dynamically decoding strings and payloads.</p>\n<p><br></p>\n<p>This runtime decoding significantly complicates static analysis by concealing critical components such as AppleScript payloads and hardcoded asset targets. XOR encoding is a widely used obfuscation tactic in malware development, allowing threats like Atomic Stealer to bypass signature-based detection mechanisms employed by antivirus (AV) and endpoint detection and response (EDR) solutions.</p>",
      "TTP_ID": "5e5e8dc667cf77001710d421",
      "TTPDetails": {
        "title": "Obfuscated Files or Information",
        "description": "Obfuscated Files or Information attack uses encoding or encryption to change the signature & fingerprint of malicious code to bypass security software algorithms.",
        "number": "T1027",
        "stage": "07: Defense Evasion"
      }
    },
    {
      "procedure": "<p>The new variant of Atomic Stealer employs heavy obfuscation through XOR encoding with a static key (0x91). A function named bewta() is responsible for de-xoring various bytes at runtime, dynamically decoding strings and payloads.</p>\n<p><br></p>\n<p>This runtime decoding significantly complicates static analysis by concealing critical components such as AppleScript payloads and hardcoded asset targets. XOR encoding is a widely used obfuscation tactic in malware development, allowing threats like Atomic Stealer to bypass signature-based detection mechanisms employed by antivirus (AV) and endpoint detection and response (EDR) solutions.</p>",
      "TTP_ID": "5f7dafb1dc55030017890302",
      "TTPDetails": {
        "title": "XOR Encoding",
        "description": "XOR Encoding technique uses the XOR multiplication encoding schemes to hide malicious code or to conceal stolen data ready for extraction.",
        "number": "",
        "stage": "12: Command & Control"
      }
    },
    {
      "procedure": "<p>As stressed earlier in the Command and Scripting section, Atomic Stealer prompts for and captures the user\u2019s password, then accesses the macOS Keychain.</p>\n<p><br></p>\n<p>osascript -e 'display dialog \"The launcher needs permissions to enable background auto-updates.</p>\n<p>Please enter your password.\" with title \"Auto-Updates System\" default answer \"\" with icon caution buttons {\"Continue\"} default button \"Continue\" with hidden answer'</p>\n<p><br></p>\n<p>Then, Atomic Stealer copies the Keychain database to a new directory:</p>\n<p><br></p>\n<p>cp ~/Library/Keychains ~/Documents/data/Keychain/kc.db</p>\n<p><br></p>\n<p>Then, it unlocks the keychain and uses the bundled open-source tool Chainbreaker to extract credentials. This allows exfiltration of login data stored in the keychain.</p>\n<p><br></p>\n<p>security unlock-keychain -p &lt;password&gt; /Users/&lt;user&gt;/Library/Keychains/login.keychain-db</p>",
      "TTP_ID": "6006fbf77cd3ef0017995a2c",
      "TTPDetails": {
        "title": "Keychain",
        "description": "Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ~/Library/Keychains/,/Library/Keychains/, and /Network/Library/Keychains/. [1] The security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.\n\nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. [2] By default, the passphrase for the keychain is the user\u2019s logon credentials.",
        "number": "T1555.001",
        "stage": "08: Credential Access"
      }
    },
    {
      "procedure": "<p>Atomic Stealer (AMOS) performs system reconnaissance by executing various commands to gather detailed information about the victim\u2019s device. Commonly used commands include uname, sw_vers, ioreg, as well as:</p>\n<p><br></p>\n<p>system_profiler SPHardwareDataType</p>\n<p>system_profiler SPDisplaysDataType</p>",
      "TTP_ID": "5ff3b07118d9c00017529b22",
      "TTPDetails": {
        "title": "System Information Discovery",
        "description": "System Information Discovery attack is used by an adversary to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture to shape follow-on attack steps including whether or not to fully infect the target and/or attempts other specific actions.",
        "number": "T1082",
        "stage": "09: Discovery"
      }
    },
    {
      "procedure": "<p>The collected information is typically stored in files like Sysinfo.txt</p>",
      "TTP_ID": "6009836f5eddce0017a79369",
      "TTPDetails": {
        "title": "Local Data Staging",
        "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.",
        "number": "T1074.001",
        "stage": "11: Collection"
      }
    },
    {
      "procedure": "<p>It targets Safari cookies by copying the Cookies.binarycookies file and extracts Notes data by duplicating files like NoteStore.sqlite, NoteStore.sqlite-shm, and NoteStore.sqlite-wal<br>\n<br>\nSteals Safari Cookies. Duplicate file \"Cookies.binarycookies\" of folder safariFolder to folder baseFolderPath with replacing</p>",
      "TTP_ID": "5e578a93f51c645aba4f06dd",
      "TTPDetails": {
        "title": "Steal Web Session Cookie",
        "description": "Steal Web Session Cookie attack allows an adversary to steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials.",
        "number": "T1539",
        "stage": "08: Credential Access"
      }
    },
    {
      "procedure": "<p>Additionally, Atomic Stealer iterates through files in the Desktop and Documents directories, selecting those with particular extensions and sizes, and duplicates them to a designated folder for exfiltration.&nbsp;</p>\n<p><br></p>\n<p>Document Collection Loop</p>\n<p><br></p>\n<p>repeat with aFile in (desktopFiles &amp; documentsFiles)</p>\n<p>&nbsp;&nbsp;if fileExtension is in extensionsList and fileSize \u2264 51200 then</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;duplicate aFile to folder fileGrabberFolderPath with replacing</p>\n<p>&nbsp;&nbsp;end if</p>\n<p>end repeat</p>",
      "TTP_ID": "5f9c0b2d877bb400171a48b6",
      "TTPDetails": {
        "title": "File and Directory Discovery",
        "description": "File and Directory Discovery attack enumerates files & directories or search in specific locations of a host or network share for certain information within a file system during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Attackers use command shell utilities like dir, tree, ls, find, and locate.",
        "number": "T1083",
        "stage": "09: Discovery"
      }
    },
    {
      "procedure": "<p>In previous sections, we stressed that Atomic Stealer is designed to collect data such as Keychain passwords, system information, files from the desktop and documents folders, and macOS user passwords.&nbsp;</p>\n<p><br></p>\n<p>AMOS typically exfiltrates this data by compressing it into a ZIP archive and transmitting it over an existing command-and-control (C2) channel. The exfiltration process involves sending the ZIP file via HTTP POST requests to a C2 server.&nbsp;</p>",
      "TTP_ID": "5fe0f94be45d410017a79cca",
      "TTPDetails": {
        "title": "Exfiltration Over C2 Channel",
        "description": "Exfiltration Over C2 Channel attack steals data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
        "number": "T1041",
        "stage": "13: Exfiltration"
      }
    },
    {
      "procedure": "<p>Atomic Stealer collects information from the infected host.</p>",
      "TTP_ID": "5ff5e9864f7abf0017fd30ad",
      "TTPDetails": {
        "title": "Data from Local System",
        "description": "Data from Local System attack allows adversaries to search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries can use a Command and Scripting Interpreter, such as cmd, or use Automated Collection on the local system.",
        "number": "T1005",
        "stage": "11: Collection"
      }
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>",
      "TTP_ID": "6009856d5eddce0017a7936e",
      "TTPDetails": {
        "title": "GUI Input Capture",
        "description": "GUI Input Capture allows adversaries to mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1] This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell.",
        "number": "T1056.002",
        "stage": "11: Collection"
      }
    }
  ],
  "relatedMalwareDetails": [
    {
      "title": "Atomic macOS Stealer AMOS (Info Stealer)",
      "description": "The malware is specifically designed to target macOS and can steal sensitive information from the victim\u2019s machine. The Atomic macOS Stealer can steal various types of information from the victim\u2019s machine, including keychain passwords, complete system information, files from the desktop and documents folder, and even the macOS password. The stealer is designed to target multiple browsers and can extract auto-fills, passwords, cookies, wallets, and credit card information. Specifically, AMOS can target cryptowallets such as Electrum, Binance, Exodus, Atomic, and Coinomi."
    }
  ]
}