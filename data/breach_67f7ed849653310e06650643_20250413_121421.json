{
  "_id": "67f7ed849653310e06650643",
  "title": "Atomic Stealer: Dissecting 2024's Most Notorious macOS Infostealer",
  "description": "Discover how Atomic Stealer (AMOS) targets macOS users, steals credentials and data, and how to detect, prevent, and validate against its TTPs.",
  "date": "2025-04-12T13:29:58.000Z",
  "url": "https://www.picussecurity.com/resource/blog/atomic-stealer-amos-macos-threat-analysis",
  "source": "Picus Security",
  "author": "sila.ozeren@picussecurity.com (S\u0131la \u00d6zeren)",
  "affectedIndustries": [],
  "affectedTechnologies": [
    "macOS (Endpoint OS)"
  ],
  "category": [
    "Endpoint Security",
    "Phishing Attacks"
  ],
  "relatedTTPs": [
    "5ff5e9864f7abf0017fd30ad",
    "5e5e8dc667cf77001710d421",
    "5fe0f94be45d410017a79cca",
    "5fe74f54778f4500170dc31f",
    "5fc92bbc2cf717001723dcdb",
    "5fdd16fa0128e50017fbea20",
    "6006fbf77cd3ef0017995a2c",
    "5e578a92f51c645aba4f0056",
    "5ffdef6502b57a0017acde0b",
    "5fce48abf4d5f3001723bb34",
    "5e578a91f51c645aba4ef778",
    "6009856d5eddce0017a7936e",
    "5f7dafb1dc55030017890302",
    "5ff3b07118d9c00017529b22",
    "6009836f5eddce0017a79369",
    "5e578a93f51c645aba4f06dd",
    "5f9c0b2d877bb400171a48b6"
  ],
  "relatedActors": [],
  "relatedMalware": [
    "644bb3d15af3a20014d0f35d"
  ],
  "IOCs": [
    {
      "ips": [
        "193.233.132.188",
        "46.101.104.172"
      ],
      "ipsWithRange": [
        "193.233.132.188",
        "46.101.104.172"
      ],
      "domains": [],
      "hashesMd5": [],
      "hashesSha1": [],
      "hashesSha256": [],
      "mitre": [
        "T1566.002",
        "T1204.002",
        "T1059.002",
        "T1027",
        "T1555.001",
        "T1005",
        "T1041",
        "T1562.012",
        "T1562.011",
        "T1562.010",
        "T1056",
        "T1562.009"
      ],
      "cves": []
    }
  ],
  "procedures": [
    {
      "procedure": "<p>Cybercriminals exploit Google's advertising platform to display deceptive ads that redirect users to fraudulent websites hosting Atomic Stealer. For instance, users searching for software like \"Arc Browser\" may encounter malicious ads leading to spoofed sites (e.g., aricl[.]net) that prompt the download of a malicious DMG installer.\u200b</p>",
      "TTP_ID": "5e578a91f51c645aba4ef778"
    },
    {
      "procedure": "<p>Attackers create counterfeit versions of popular applications such as Tor Browser, Photoshop CC, and Microsoft Office. Unsuspecting users download these malicious installers, typically packaged as disk image (.dmg) files, which execute the malware instead of the legitimate software. \u200b</p>",
      "TTP_ID": "5ffdef6502b57a0017acde0b"
    },
    {
      "procedure": "<p>Users are deceived into executing commands via the Terminal application. For example, a fake installer may instruct users to open Terminal and drag-and-drop a file to install an app, which actually executes the malicious payload.</p>\n<p><br></p>\n<p><img height=\"416px;\" src=\"https://lh7-rt.googleusercontent.com/slidesz/AGV_vUdIpvyAwpD2gpu8UyGGaHa0X5_5aT1Q0yB7IVovwvMwD3_8aZz7a1KDojOvVQKhhhG7TutetIolPyerNzbJSs_WxJj2qc6lUcT-wT9SLPPvVMEF3-k04mHDFq4gSB49UTLn2OIJzQ=s2048?key=mxnwOeNYxDn4hXdznkV_KGuL\" width=\"734px;\"/>&nbsp;</p>",
      "TTP_ID": "5fce48abf4d5f3001723bb34"
    },
    {
      "procedure": "<p>Spearphishing is the main intial access for the malware.</p>",
      "TTP_ID": "5e578a92f51c645aba4f0056"
    },
    {
      "procedure": "<p>Upon opening these files, users are instructed to bypass macOS Gatekeeper\u2014a security feature intended to block untrusted software\u2014by right-clicking the application and selecting \"Open.\" This action permits the execution of unsigned or ad-hoc signed applications, circumventing Apple's security measures.</p>",
      "TTP_ID": "5fdd16fa0128e50017fbea20"
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>\n<p>&nbsp;<img height=\"390px;\" src=\"https://lh7-rt.googleusercontent.com/slidesz/AGV_vUdZbKtiTNqWA8wC_sjjn54PddCaFIipXzG7l5vWQy-bJXlFDGUWii_F5YvlKPZqxbWxb9ZiMfoIRTCWurc-ErWviEbWfa9jOd7WzASMzFwGa1dTPHHLwptVftAq3Bz_zyJl7XrMLw=s2048?key=mxnwOeNYxDn4hXdznkV_KGuL\" width=\"761px;\"/></p>\n<p><br></p>\n<p>Atomic Stealer employs AppleScript commands executed via osascript to create these fake dialog boxes. The use of the \"hidden answer\" parameter ensures that the password input is masked, mimicking standard password entry fields and enhancing the deception.</p>\n<p><br></p>\n<p>osascript -e 'display dialog \"The launcher needs permissions to enable background auto-updates.\\n\\nPlease enter your password.\" with title \"Auto-Updates System\" default answer \"\" with icon caution buttons {\"Continue\"} default button \"Continue\" with hidden answer'&nbsp;</p>",
      "TTP_ID": "5fc92bbc2cf717001723dcdb"
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>",
      "TTP_ID": "5fe74f54778f4500170dc31f"
    },
    {
      "procedure": "<p>The new variant of Atomic Stealer employs heavy obfuscation through XOR encoding with a static key (0x91). A function named bewta() is responsible for de-xoring various bytes at runtime, dynamically decoding strings and payloads.</p>\n<p><br></p>\n<p>This runtime decoding significantly complicates static analysis by concealing critical components such as AppleScript payloads and hardcoded asset targets. XOR encoding is a widely used obfuscation tactic in malware development, allowing threats like Atomic Stealer to bypass signature-based detection mechanisms employed by antivirus (AV) and endpoint detection and response (EDR) solutions.</p>",
      "TTP_ID": "5e5e8dc667cf77001710d421"
    },
    {
      "procedure": "<p>The new variant of Atomic Stealer employs heavy obfuscation through XOR encoding with a static key (0x91). A function named bewta() is responsible for de-xoring various bytes at runtime, dynamically decoding strings and payloads.</p>\n<p><br></p>\n<p>This runtime decoding significantly complicates static analysis by concealing critical components such as AppleScript payloads and hardcoded asset targets. XOR encoding is a widely used obfuscation tactic in malware development, allowing threats like Atomic Stealer to bypass signature-based detection mechanisms employed by antivirus (AV) and endpoint detection and response (EDR) solutions.</p>",
      "TTP_ID": "5f7dafb1dc55030017890302"
    },
    {
      "procedure": "<p>As stressed earlier in the Command and Scripting section, Atomic Stealer prompts for and captures the user\u2019s password, then accesses the macOS Keychain.</p>\n<p><br></p>\n<p>osascript -e 'display dialog \"The launcher needs permissions to enable background auto-updates.</p>\n<p>Please enter your password.\" with title \"Auto-Updates System\" default answer \"\" with icon caution buttons {\"Continue\"} default button \"Continue\" with hidden answer'</p>\n<p><br></p>\n<p>Then, Atomic Stealer copies the Keychain database to a new directory:</p>\n<p><br></p>\n<p>cp ~/Library/Keychains ~/Documents/data/Keychain/kc.db</p>\n<p><br></p>\n<p>Then, it unlocks the keychain and uses the bundled open-source tool Chainbreaker to extract credentials. This allows exfiltration of login data stored in the keychain.</p>\n<p><br></p>\n<p>security unlock-keychain -p &lt;password&gt; /Users/&lt;user&gt;/Library/Keychains/login.keychain-db</p>",
      "TTP_ID": "6006fbf77cd3ef0017995a2c"
    },
    {
      "procedure": "<p>Atomic Stealer (AMOS) performs system reconnaissance by executing various commands to gather detailed information about the victim\u2019s device. Commonly used commands include uname, sw_vers, ioreg, as well as:</p>\n<p><br></p>\n<p>system_profiler SPHardwareDataType</p>\n<p>system_profiler SPDisplaysDataType</p>",
      "TTP_ID": "5ff3b07118d9c00017529b22"
    },
    {
      "procedure": "<p>The collected information is typically stored in files like Sysinfo.txt</p>",
      "TTP_ID": "6009836f5eddce0017a79369"
    },
    {
      "procedure": "<p>It targets Safari cookies by copying the Cookies.binarycookies file and extracts Notes data by duplicating files like NoteStore.sqlite, NoteStore.sqlite-shm, and NoteStore.sqlite-wal<br>\n<br>\nSteals Safari Cookies. Duplicate file \"Cookies.binarycookies\" of folder safariFolder to folder baseFolderPath with replacing</p>",
      "TTP_ID": "5e578a93f51c645aba4f06dd"
    },
    {
      "procedure": "<p>Additionally, Atomic Stealer iterates through files in the Desktop and Documents directories, selecting those with particular extensions and sizes, and duplicates them to a designated folder for exfiltration.&nbsp;</p>\n<p><br></p>\n<p>Document Collection Loop</p>\n<p><br></p>\n<p>repeat with aFile in (desktopFiles &amp; documentsFiles)</p>\n<p>&nbsp;&nbsp;if fileExtension is in extensionsList and fileSize \u2264 51200 then</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;duplicate aFile to folder fileGrabberFolderPath with replacing</p>\n<p>&nbsp;&nbsp;end if</p>\n<p>end repeat</p>",
      "TTP_ID": "5f9c0b2d877bb400171a48b6"
    },
    {
      "procedure": "<p>In previous sections, we stressed that Atomic Stealer is designed to collect data such as Keychain passwords, system information, files from the desktop and documents folders, and macOS user passwords.&nbsp;</p>\n<p><br></p>\n<p>AMOS typically exfiltrates this data by compressing it into a ZIP archive and transmitting it over an existing command-and-control (C2) channel. The exfiltration process involves sending the ZIP file via HTTP POST requests to a C2 server.&nbsp;</p>",
      "TTP_ID": "5fe0f94be45d410017a79cca"
    },
    {
      "procedure": "<p>Atomic Stealer collects information from the infected host.</p>",
      "TTP_ID": "5ff5e9864f7abf0017fd30ad"
    },
    {
      "procedure": "<p>The AppleScript method involves the malware displaying deceptive dialog boxes to users, requesting their system passwords under the guise of legitimate system prompts.\u200b</p>",
      "TTP_ID": "6009856d5eddce0017a7936e"
    }
  ]
}